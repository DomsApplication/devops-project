name: Deploy changes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run the workflow against'
        type: environment
        required: true
  push:
    branches:
      - '**'

permissions:
  contents: write

jobs:
  deploy:
    name: Build and Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'default' }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      packages: read

    if: github.ref_name != 'main'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Debug Information
        run: |
          echo environment: ${{ github.event.inputs.environment || 'default' }}
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo branch or tag: ${{ github.ref_type }}
          echo branch or tag name: ${{ github.ref_name }}
          echo git_hash: $(git rev-parse --short "$GITHUB_SHA")
          echo git_branch: ${GITHUB_REF#refs/heads/}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo HOST: ${{ secrets.DROPLET_IP }}

      - name: Ensure target directory exists on remote server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /home/${{ github.ref_name }}

      # This will copies the frontend code base to the remote server
      - name: CI - Move frontend source to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 600s
          overwrite: true
          source: ./client/
          target: /home/${{ github.ref_name }}

      # This will copies the backend code base to the remote server
      - name: CI - Move backend source to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 600s
          overwrite: true
          source: ./server/
          target: /home/${{ github.ref_name }}

      # This is for running the commands on the remote server
      - name: Deploy Application
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900s
          script: |
            echo "****************** Checking PM2 Running Processes *****************"

            # Check if a PM2 process for the current feature branch exists
            BACKEND_PM2_ID=$(pm2 id "server-${{ github.ref_name }}" | sed 's/\[//g' | sed 's/\]//g')
            FRONTEND_PM2_ID=$(pm2 id "client-${{ github.ref_name }}" | sed 's/\[//g' | sed 's/\]//g')

            if [ -z "$BACKEND_PM2_ID" ] || [ "$BACKEND_PM2_ID" == "[]" ]; then
                echo "No existing process found for this feature branch. Assigning new ports."

                # Count all PM2 processes (not just online ones)
                PROCESS_COUNT=$(pm2 list | grep -cE "(online|stopped|errored)")

                echo "Total PM2 processes (all states): $PROCESS_COUNT"

                # Ensure PROCESS_COUNT is a valid number
                if [ -z "$PROCESS_COUNT" ] || [ "$PROCESS_COUNT" -lt 0 ]; then
                    PROCESS_COUNT=0
                fi

                # Prevent division issues by ensuring integer division
                if [ "$PROCESS_COUNT" -eq 0 ]; then
                    REACT_PORT=3000
                    EXPRESS_PORT=4000
                else
                    REACT_PORT=$((3000 + PROCESS_COUNT / 2))
                    EXPRESS_PORT=$((4000 + PROCESS_COUNT / 2))
                fi

                echo "Setting React to run on port $REACT_PORT"
                echo "Setting Express to run on port $EXPRESS_PORT"
            else
                echo "Existing process found for feature branch. Reusing existing port and deleting the existing instancs"

                # Retrieve existing PORT value from the existing PM2 process
                EXPRESS_PORT=$(pm2 env "$BACKEND_PM2_ID" | grep "PORT" | sed 's/.*PORT: \([0-9]*\).*/\1/')
                REACT_PORT=$(pm2 env "$FRONTEND_PM2_ID" | grep "PORT" | sed 's/.*PORT: \([0-9]*\).*/\1/')
                pm2 delete "server-${{ github.ref_name }}"
                pm2 delete "client-${{ github.ref_name }}"
                echo "Reusing existing Express PORT: $EXPRESS_PORT"
            fi

            echo "****************** Creating .env Files *****************"

            # Create .env file for the server
            echo "PORT=$EXPRESS_PORT" > /home/${{ github.ref_name }}/server/.env
            echo "ALLOWED_ORIGINS=http://${{ secrets.DROPLET_IP }}:$REACT_PORT,http://165.232.190.41:$REACT_PORT" >> /home/${{ github.ref_name }}/server/.env

            # Create .env file for the client
            echo "REACT_APP_API_URL=http://${{ secrets.DROPLET_IP }}:$EXPRESS_PORT" > /home/${{ github.ref_name }}/client/.env

            echo "****************** Updating & Installing Dependencies *****************"
            cd /home/${{ github.ref_name }}/server
            npm install
            PORT=$EXPRESS_PORT pm2 start npm --name "server-${{ github.ref_name }}" -- start

            cd /home/${{ github.ref_name }}/client
            export NODE_OPTIONS="--max-old-space-size=1024"
            npm cache clean --force
            npm install
            npm run build  # Build React frontend
            pm2 serve build/ $REACT_PORT --name "client-${{ github.ref_name }}" --spa

            echo "****************** Starting Applications with PM2 *****************"

            pm2 save
            pm2 startup