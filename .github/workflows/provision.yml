name: Provision environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run the workflow against'
        type: environment
        required: true
      project-name:
        description: "Provide DO project name"
        required: true
        type: string
        default: "first-project"

permissions:
  contents: write

jobs:
  provision:
    name: Provision and Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'default' }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      packages: read

    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Generate Droplate Unique Name
        run: |
          DROPLET_NAME_GEN="${{ github.ref_name }}"
          echo "DROPLET_NAME=$DROPLET_NAME_GEN" >> $GITHUB_ENV

      - name: Get project details
        run: |
          PROJECT_ID=$(doctl projects list --format ID,Name --no-header | awk -v name=${{ inputs.project-name }} '$2 == name {print $1}')
          if [[ -z "$PROJECT_ID" ]]; then
            echo "❌ Error: Project '$PROJECT_NAME' not found!"
            exit 1
          fi
          echo "✅ Found Project ID: $PROJECT_ID"
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Check if Droplet Exists
        run: |
          DROPLET_ID=$(doctl compute droplet list --format ID,Name --no-header | grep "$DROPLET_NAME" | awk '{print $1}')
          if [[ -n "$DROPLET_ID" ]]; then
            echo "✅ Droplet already exists with ID: $DROPLET_ID"
            echo "DROPLET_EXISTS=true" >> $GITHUB_ENV
            echo "DROPLET_ID=$DROPLET_ID" >> $GITHUB_ENV
          else
            echo "❌ Droplet does not exist."
            echo "DROPLET_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Debug Information
        run: |
          echo environment: ${{ github.event.inputs.environment || 'default' }}
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo branch or tag: ${{ github.ref_type }}
          echo branch or tag name: ${{ github.ref_name }}
          echo "git_hash: $GITHUB_SHA"
          echo git_branch: ${GITHUB_REF#refs/heads/}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo PROJECT_ID: ${{ env.PROJECT_ID }}
          echo PROJECT_NAME: ${{ inputs.project-name }}
          echo DROPLET_ID: ${{ env.DROPLET_ID }}
          echo DROPLET_NAME: ${{ env.DROPLET_NAME }}
          echo SSH_KEY_ID: ${{ secrets.SSH_KEY_ID }}

      - name: Create a DigitalOcean Droplet
        if: env.DROPLET_EXISTS == 'false'
        run: |
          doctl compute droplet create ${{ env.DROPLET_NAME }} \
            --region blr1 \
            --size s-1vcpu-1gb \
            --image ubuntu-22-04-x64 \
            --ssh-keys ${{ secrets.SSH_KEY_ID }} \
            --project-id "$PROJECT_ID" \
            --wait
          echo "✅ droplet created successfully with the name of '${{ env.DROPLET_NAME }}'"

      - name: Get Droplet Details
        if: env.DROPLET_EXISTS == 'false'
        run: |
          echo "Fetching droplet details using droplet name: ${{ env.DROPLET_NAME }}"
          DROPLET_INFO=$(doctl compute droplet get ${{ env.DROPLET_NAME }} --format "ID,Name,PublicIPv4" --no-header)
          
          # Extract ID and Public IP
          DROPLET_ID=$(echo "$DROPLET_INFO" | awk '{print $1}')
          DROPLET_IP=$(echo "$DROPLET_INFO" | awk '{print $3}')
          
          # Validate extracted values
          if [ -z "$DROPLET_ID" ] || [ -z "$DROPLET_IP" ]; then
            echo "❌ Error: Failed to retrieve droplet details."
            exit 1
          fi

          # Store values in GitHub Actions environment
          echo "DROPLET_ID=$DROPLET_ID" >> $GITHUB_ENV
          echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
      
          # Print retrieved details
          echo "✅ Droplet Name: $DROPLET_NAME"
          echo "✅ Droplet ID: $DROPLET_ID"
          echo "✅ Droplet Public IP: $DROPLET_IP"
          
      - name: Set environment in GitHub Secrets
        if: env.DROPLET_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo -n "${{ env.DROPLET_IP }}" | gh secret set DROPLET_IP --env ${{ github.event.inputs.environment || 'default' }} --repo ${{ github.repository }}

      - name: Debug Information of SSH connect
        run: |
          echo DROPLET_IP: ${{ secrets.DROPLET_IP }}

      - name: Ping to the server via SSH
        env:
          HOST: ${{ secrets.DROPLET_IP }}
        run: |
            # Retry Ping Check up to 5 times
            echo "Start connecting to the HOST: $HOST"
            for i in {1..5}; do
              echo "Attempt $i: Checking if SSH port 22 is open..."
              nc -zvw3 $HOST 22 && break
              echo "SSH port 22 is not open yet. Retrying in 10 seconds..."
              sleep 10
            done

            if ! nc -zvw3 $HOST 22; then
              echo "SSH connection failed after 5 attempts. Exiting."
              exit 1
            fi

      - name: Post Deployment install additional softwares
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900s
          script: |
            echo "Connected successfully!................"
            echo "=============> Set non-interactive mode to prevent prompts."
            export DEBIAN_FRONTEND=noninteractive

            echo "=============> Kill any running apt processes (fixes 'Could not get lock' error)"
            sudo killall apt apt-get || true
            sudo rm -rf /var/lib/apt/lists/lock /var/lib/dpkg/lock /var/lib/dpkg/lock-frontend

            echo "=============> Update package list and upgrade (without interactive prompts)"
            apt-get update -yq && apt-get upgrade -yq --allow-downgrades

            echo "=============> Install Node.js, npm, and git"
            apt-get install -yq gnupg curl npm

            echo "=============> Add NodeSource repository for Node.js 18"
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -

            echo "=============> Install Node.js 18 and npm"
            sudo apt-get install -y nodejs

            echo "=============> Update npm to the latest version"
            sudo npm install -g npm@latest
       
            echo "=============> Verify Installation"
            node -v
            npm -v

            echo "=============> Install pm2 for process management"
            npm install -g pm2

            echo "=============> To import the MongoDB public GPG key, run the following command:"
            curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg --dearmor

            echo "=============> Create the list file for Ubuntu 22.04"
            echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list


            echo "=============> Update package lists again"
            apt-get update -yq

            echo "=============> Install MongoDB 8.2.0"
            sudo apt-get install -yq mongodb-org=8.0.0 mongodb-org-database=8.0.0 mongodb-org-server=8.0.0 mongodb-mongosh mongodb-org-mongos=8.0.0 mongodb-org-tools=8.0.0

            echo "=============> Prevent automatic updates of MongoDB packages"
            echo "mongodb-org hold" | sudo dpkg --set-selections
            echo "mongodb-org-database hold" | sudo dpkg --set-selections
            echo "mongodb-org-server hold" | sudo dpkg --set-selections
            echo "mongodb-mongosh hold" | sudo dpkg --set-selections
            echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
            echo "mongodb-org-tools hold" | sudo dpkg --set-selections

            echo "=============> Start and enable MongoDB service"
            sudo systemctl start mongod
            sudo systemctl enable mongod

            echo "=============> Check MongoDB service status"
            sudo systemctl status mongod --no-pager
