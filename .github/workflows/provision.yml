name: Provision environment

on:
  workflow_dispatch:
    inputs:
      project-name:
        description: "Digital Ocean Project name for provision resource"
        required: true
        type: string
        default: "first-project"
      instance-name:
        description: "The provided value will append suffix with 'droplet'"
        required: true
        type: string
        default: "default"

permissions:
  contents: write

jobs:
  provision:
    name: Provision and Deployment
    runs-on: ubuntu-latest
    #environment: ${{ github.event.inputs.environment || 'default' }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      packages: read
    
    if: github.ref_name == 'main'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Generate Droplate Unique Name
        run: |
          DROPLET_NAME_GEN="droplet${{ inputs.instance-name }}"
          echo "DROPLET_NAME=$DROPLET_NAME_GEN" >> $GITHUB_ENV

      - name: Get project details
        run: |
          PROJECT_ID=$(doctl projects list --format ID,Name --no-header | awk -v name=${{ inputs.project-name }} '$2 == name {print $1}')
          if [[ -z "$PROJECT_ID" ]]; then
            echo "❌ Error: Project '$PROJECT_NAME' not found!"
            exit 1
          fi
          echo "✅ Found Project ID: $PROJECT_ID"
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Check if Droplet Exists
        run: |
          DROPLET_ID=$(doctl compute droplet list --format ID,Name --no-header | grep "$DROPLET_NAME" | awk '{print $1}')
          if [[ -n "$DROPLET_ID" ]]; then
            echo "✅ Droplet already exists with ID: $DROPLET_ID"
            echo "DROPLET_EXISTS=true" >> $GITHUB_ENV
            echo "DROPLET_ID=$DROPLET_ID" >> $GITHUB_ENV
          else
            echo "❌ Droplet does not exist."
            echo "DROPLET_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Debug Information
        run: |
          echo environment: ${{ github.event.inputs.environment || 'N/A' }}
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo branch or tag: ${{ github.ref_type }}
          echo branch or tag name: ${{ github.ref_name }}
          echo "git_hash: $GITHUB_SHA"
          echo git_branch: ${GITHUB_REF#refs/heads/}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo PROJECT_ID: ${{ env.PROJECT_ID }}
          echo PROJECT_NAME: ${{ inputs.project-name }}
          echo DROPLET_ID: ${{ env.DROPLET_ID }}
          echo DROPLET_NAME: ${{ env.DROPLET_NAME }}
          echo SSH_KEY_ID: ${{ secrets.SSH_KEY_ID }}

      - name: Create a DigitalOcean Droplet
        if: env.DROPLET_EXISTS == 'false'
        run: |
          doctl compute droplet create ${{ env.DROPLET_NAME }} \
            --region blr1 \
            --size s-1vcpu-1gb \
            --image ubuntu-22-04-x64 \
            --ssh-keys ${{ secrets.SSH_KEY_ID }} \
            --project-id "$PROJECT_ID" \
            --wait
          echo "✅ droplet created successfully with the name of '${{ env.DROPLET_NAME }}'"

      - name: Get Droplet Details
        if: env.DROPLET_EXISTS == 'false'
        run: |
          echo "Fetching droplet details using droplet name: ${{ env.DROPLET_NAME }}"
          DROPLET_INFO=$(doctl compute droplet get ${{ env.DROPLET_NAME }} --format "ID,Name,PublicIPv4" --no-header)
          
          # Extract ID and Public IP
          DROPLET_ID=$(echo "$DROPLET_INFO" | awk '{print $1}')
          DROPLET_IP=$(echo "$DROPLET_INFO" | awk '{print $3}')
          
          # Validate extracted values
          if [ -z "$DROPLET_ID" ] || [ -z "$DROPLET_IP" ]; then
            echo "❌ Error: Failed to retrieve droplet details."
            exit 1
          fi

          # Store values in GitHub Actions environment
          echo "DROPLET_ID=$DROPLET_ID" >> $GITHUB_ENV
          echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
      
          # Print retrieved details
          echo "✅ Droplet Name: $DROPLET_NAME"
          echo "✅ Droplet ID: $DROPLET_ID"
          echo "✅ Droplet Public IP: $DROPLET_IP"

      - name: Set environment in GitHub Secrets
        if: env.DROPLET_EXISTS == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          echo "Started....."
          
          # Retrieve the existing DROPLET_MAP secret
          EXISTING_SECRET= ${{ secrets.DROPLET_MAP }}
          echo "Print/1: $EXISTING_SECRET"

          if [ -z "$EXISTING_SECRET" ]; then
            # If the secret doesn't exist, initialize an empty JSON object
            DROPLET_MAP="{}"
            echo "Print/1.1: $DROPLET_MAP"
          else
            # Fetch the existing secret value
            echo "Print/1.2"
            DROPLET_MAP=$(gh secret view DROPLET_MAP --repo "${{ github.repository }}" --json value -q .value)
            echo "Print/1.3"
          fi
          echo "Print/2: $DROPLET_MAP"
          
      - name: Wait for SSH Service Initialization
        if: env.DROPLET_EXISTS == 'false'
        run: |
          echo "Waiting for 90 seconds SSH service to be ready..."
          sleep 90  # Wait for 90 seconds before attempting SSH connection

      - name: Post Deployment install additional softwares
        if: env.DROPLET_EXISTS == 'false'
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900s
          script_path: ./.github/workflows/script/provision.sh
